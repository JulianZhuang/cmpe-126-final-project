

#include <iostream>
#include <vector>
#include <queue>
#include <list>
#include <map>
#include <algorithm>
#include <string>
#include <cstdlib> // For std::rand and std::srand
#include <ctime>   // For std::time

using namespace std;

// Book struct
struct Book {
    int id;
    string title;
    string author;
    bool isAvailable;

    Book(int id, string title, string author) : id(id), title(title), author(author), isAvailable(true) {}
};

// User struct
struct User {
    int id;
    string name;

    User(int id, string name) : id(id), name(name) {}
};

// Library Class
class Library {
private:
    vector<Book> books;                 // Book storage
    list<User> users;                   // Dynamic user list
    queue<pair<int, int>> borrowQueue;  // Queue for borrow requests

public:
    // Add a book
    void addBook(int id, const string& title, const string& author) {
        books.emplace_back(id, title, author);
    }

    // Add a user
    void addUser(int id, const string& name) {
        users.emplace_back(id, name);
    }

    // Function to display all users
    void displayUsers() {
        if (users.empty()) {
            cout << "No users in the library.\n";
            return;
        }
        cout << "Users:\n";
        for (const auto& user : users) {
            cout << "ID: " << user.id << ", Name: " << user.name << endl;
        }
    }

    // Function to remove a user by ID
    void removeUser(int userId) {
        auto it = find_if(users.begin(), users.end(), [userId](const User& user) {
            return user.id == userId;
        });

        if (it != users.end()) {
            cout << "Removing user: " << it->name << endl;
            users.erase(it);
        } else {
            cout << "User with ID " << userId << " not found.\n";
        }
    }

    // Function to check if a user exists
    bool isUserExist(int userId) {
        return any_of(users.begin(), users.end(), [userId](const User& user) {
            return user.id == userId;
        });
    }


    // Borrow a book
    void borrowBook(int userId, int bookId) {
        borrowQueue.push({userId, bookId});
    }

    // Process borrow requests
    void processBorrowRequests() {
        while (!borrowQueue.empty()) {
            auto request = borrowQueue.front();
            borrowQueue.pop();
            int userId = request.first;
            int bookId = request.second;

            auto book = find_if(books.begin(), books.end(), [bookId](const Book& b) { return b.id == bookId; });
            if (book != books.end() && book->isAvailable) {
                book->isAvailable = false;
                cout << "User " << userId << " borrowed book: " << book->title << endl;
            } else {
                cout << "Book ID " << bookId << " is unavailable!" << endl;
            }
        }
    }

    // Search books by title
    void searchBookByTitle(const string& title) {
        auto it = find_if(books.begin(), books.end(), [&title](const Book& b) { return b.title == title; });
        if (it != books.end()) {
            cout << "Book found: " << it->title << " by " << it->author << endl;
        } else {
            cout << "Book not found!" << endl;
        }
    }

    // Sort books by id using the STL contanier sort alogorithim
    void sortBooksByID() {
        sort(books.begin(), books.end(), [](const Book& a, const Book& b) {
            return a.id < b.id;
        });
    }
    
    // Sort books by author using bubble sort
    void sortBooksByAuthor() {
        for (size_t i = 0; i < books.size() - 1; ++i) {
            for (size_t j = 0; j < books.size() - i - 1; ++j) {
                if (books[j].author > books[j + 1].author) {
                    // Swap the books if they are in the wrong order
                    swap(books[j], books[j + 1]);
                }
            }
        }
    }
    // Function to sort books by title using quick sort
    void sortBooksByTitle() {
        quickSort(books, 0, books.size() - 1);
    }
    // Partition function for quick sort
    int partition(vector<Book>& books, int low, int high) {
        // Choose the pivot as the last element
        Book pivot = books[high];
        int i = low - 1;

        for (int j = low; j < high; ++j) {
            if (books[j].title < pivot.title) {
                ++i;
                swap(books[i], books[j]);
            }
        }

        // Place the pivot in the correct position
        swap(books[i + 1], books[high]);
        return i + 1;
    }

    // Quick sort function
    void quickSort(vector<Book>& books, int low, int high) {
        if (low < high) {
            // Find the partition index
            int pi = partition(books, low, high);

            // Recursively sort elements before and after the partition
            quickSort(books, low, pi - 1);
            quickSort(books, pi + 1, high);
        }
    }    

    // Function to randomize the order of books
    void randomizeBooks() {
        srand(time(0)); // Seed the random number generator
        for (size_t i = books.size() - 1; i > 0; --i) {
            // Generate a random index in the range [0, i]
            size_t j = rand() % (i + 1);

            // Swap the current book with the book at the random index
            swap(books[i], books[j]);
        }
    }

    // Display all books
    void displayBooks() {
        for (const auto& book : books) {
            cout << book.id << ": " << book.title << " by " << book.author << " ("
                 << (book.isAvailable ? "Available" : "Not Available") << ")" << endl;
        }
    }
};


int main() {
    Library library;

    // Add books
    library.addBook(1, "Surfaces and Essences: Analogy", " Douglas R Hofstadter");
    library.addBook(2, "The Catcher in the Rye", "J.D. Salinger");
    library.addBook(3, "To Kill a Mockingbird", "Harper Lee");
    library.addBook(4, "The Great Gatsby", "F. Scott Fitzgerald");
    library.addBook(5, "Moby Dick", "Herman Melville");
    library.addBook(6, "Pride and Prejudice", "Jane Austen");
    library.addBook(7, "War and Peace", "Leo Tolstoy");
    library.addBook(8, "The Hobbit", "J.R.R. Tolkien");
    library.addBook(9, "Brave New World", "Aldous Huxley");
    library.addBook(10, "Fahrenheit 451", "Ray Bradbury");
    library.addBook(11, "Crime and Punishment", "Fyodor Dostoevsky");

    // Add users
    library.addUser(101, "Alice");
    library.addUser(102, "Bob");
    library.addUser(103, "Quan");

    cout << "\nAdding users...\n";
    library.addUser(107, "Charlie");
    library.addUser(106, "Diana");

    cout << "\nDisplaying all users:\n";
    library.displayUsers();

    cout << "\nRemoving user with ID 102...\n";
    library.removeUser(102);

    cout << "\nChecking if user with ID 101 exists:\n";
    if (library.isUserExist(101)) {
        cout << "User with ID 101 exists.\n";
    } else {
        cout << "User with ID 101 does not exist.\n";
    }

    cout << "\nDisplaying all users after removal:\n";
    library.displayUsers();


    // Borrow books
    library.borrowBook(101, 1);
    library.borrowBook(102, 2);
    library.borrowBook(103, 5);

    // Display books before processing requests
    cout << "\nBooks before processing borrow requests:\n";
    library.displayBooks();

    // Process borrow requests
    cout << "\nProcessing borrow requests...\n";
    library.processBorrowRequests();

    // Display books after processing requests
    cout << "\nBooks after processing borrow requests:\n";
    library.displayBooks();

    // Search and sort
    cout << "\nSearching for '1984':\n";
    library.searchBookByTitle("1984");


    cout << "\nSorting books by id with < operator...\n";
    library.sortBooksByID();
    library.displayBooks();

    cout<< "\nRandomize books\n";
    library.randomizeBooks();
    library.displayBooks();
    cout << "\nSorting books by author name with bubble sort...\n";
    library.sortBooksByAuthor();
    library.displayBooks();


    cout<< "\nRandomize books\n";
    library.randomizeBooks();
    library.displayBooks();
    cout << "\nSorting books by title name with quick sort...\n";
    library.sortBooksByTitle();
    library.displayBooks();

    return 0;
}
